// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, created_at, updated_at, name,api_key)
VALUES (?, ?, ?, ?,CONCAT(SHA2(UUID(), 256)))
`

type CreateUserParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User,error) {
	_, err := q.db.ExecContext(ctx, createUser,
        arg.ID,
        arg.CreatedAt,
        arg.UpdatedAt,
        arg.Name,
    )
    if err != nil {
        // Return nil for the user object and propagate the error
        return User{}, err
    }
	var apiKey string
    err = q.db.QueryRowContext(ctx, "SELECT api_key FROM users WHERE id = ?", arg.ID).Scan(&apiKey)
    if err != nil {
        // Handle error if unable to fetch the API key
        return User{}, err
    }

    // If the operation succeeds without error, return the newly created user
    newUser := User{
        ID:        arg.ID,
        CreatedAt: arg.CreatedAt,
        UpdatedAt: arg.UpdatedAt,
        Name:      arg.Name,
		ApiKey:    apiKey,
    }
    return newUser, nil
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one
SELECT id, created_at, updated_at, name, api_key FROM users WHERE api_key = ?
`

func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}
